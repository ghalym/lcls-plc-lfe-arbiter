<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PMPS_Arbiter" Id="{91ae890b-11cc-4d41-83ec-edc5b802c784}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PMPS_Arbiter
VAR

    fbBPRequestor : FB_BPRequestor; // Updates global PMPS RequestedBeamParams
    {attribute 'pytmc' := '
    pv: @(PREFIX)PhotonEnergyWatcher
    '}
    fbPhotonEnergyWatcher	:	FB_PhotonEnergyWatcher;
    {attribute 'pytmc' := '
    pv: @(PREFIX)BeamClassWatcher
    '}
    fbBeamClassWatcher : FB_BeamClassWatcher;
    {attribute 'pytmc' := '
    pv: @(PREFIX)BeamClassOutputs
    '}
    fbMPSInterface	:	FB_BeamClassOutputs_BCD;
    {attribute 'pytmc' := '
    pv: @(PREFIX)CuRateOutputs
    '}
    fbCuInterface	:	FB_CTLS_Outputs;

    {attribute 'pytmc' := '
        pv: @(PREFIX)BeamParamCntl
    '}
    fbBPControl : FB_BPControlDevice(nID:=10);

    (* Subsystem requests use this FB and a pragma link to pass their requests to the arbiter.
    The fb is called on each cycle and updates the arbiter with the current BP set requested
    from the subsystem PLC.*)
    //<TODO> make this so it does input and output to the IF
    (*{attribute 'pytmc' := '
    pv: @(PREFIX):PLC1
    '}*)
    {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-lfe-motion]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-lfe-motion]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-lfe-motion]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-lfe-motion]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-lfe-motion]^SYNC Inputs^TxPDO state;
                                '}
    plc_lfe_motion_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF0F);

        {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-lfe-optics]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-lfe-optics]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-lfe-optics]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-lfe-optics]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-lfe-optics]^SYNC Inputs^TxPDO state;
                                '}
    plc_lfe_optics_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF10);

        {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-xrt-homs]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-xrt-homs]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-xrt-homs]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-xrt-homs]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-xrt-homs]^SYNC Inputs^TxPDO state;
                                '}
    plc_xrt_homs_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF13);


    {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-lfe-vacuum]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-lfe-vacuum]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-lfe-vacuum]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-lfe-vacuum]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-lfe-vacuum]^SYNC Inputs^TxPDO state;
                                '}
    plc_lfe_vac_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF11);

        {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-lfe-gem]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-lfe-gem]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-lfe-gem]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-lfe-gem]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-lfe-gem]^SYNC Inputs^TxPDO state;
                                '}
    plc_lfe_gatt_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF12);



     {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-txi-lfe-vacuum]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-txi-lfe-vacuum]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-txi-lfe-vacuum]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-txi-lfe-vacuum]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-txi-lfe-vacuum]^SYNC Inputs^TxPDO state;
                                '}
    plc_txi_lfe_vacuum_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF14);

     {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-txi-lfe-motion]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-txi-lfe-motion]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-txi-lfe-motion]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-txi-lfe-motion]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-txi-lfe-motion]^SYNC Inputs^TxPDO state;
                                '}
    plc_txi_lfe_motion_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF15);

     {attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[plc-txi-lfe-optics]^IO Inputs^RequestedBP;
                                .o_CurrentBP:=TIIB[plc-txi-lfe-optics]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[plc-txi-lfe-optics]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[plc-txi-lfe-optics]^WcState^WcStateIn;
                                .i_TxPDOState:=TIIB[plc-txi-lfe-motion]^SYNC Inputs^TxPDO state;
                                '}
    plc_txi_lfe_optics_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF16);

    fbSetPE	:	PE_Ranges;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

////////////////////////////////////////////////////////////

// Dummy device for controling pmps beam parameters
fbBPControl(Arbiter:=g_fbArbiter1);

// Updating arbiter with subsystem requests.
// FEE LFE
plc_lfe_motion_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'LFE MOTION');
plc_lfe_optics_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset , sName:= 'LFE OPTICS');
plc_lfe_vac_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'LFE VACUUM');
plc_lfe_gatt_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'LFE GEMS');
// TXI LFE
plc_txi_lfe_vacuum_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'TXI LFE VACUUM');
plc_txi_lfe_motion_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'TXI LFE MOTION');
plc_txi_lfe_optics_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'TXI LFE OPTICS');
//XRT
plc_xrt_homs_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset, sName:= 'XRT OPTICS');

//Overriding the preemptive requests from the optics systems until they are valid
//GVL.g_fbArbiter1.RemoveRequest(nReqId:=plc_lfe_optics_PMPS_IO.RequestingSystemID);

// Beam parameter requestor
fbBPRequestor(Arbiter:=GVL.g_fbArbiter1, q_ReqBP => PMPS_GVL.stRequestedBeamParameters);

// Request beam class
fbMPSInterface(BP := PMPS_GVL.stRequestedBeamParameters);

// Request Cu beam rate
fbCuInterface(BP := PMPS_GVL.stRequestedBeamParameters);

// Keep an eye on the beam class
fbBeamClassWatcher(i_stCurrentBeamParams	:= PMPS_GVL.stCurrentBeamParameters,
                    i_stRequestedBeamParams := PMPS_GVL.stRequestedBeamParameters,
                    io_fbFFHWO:= GVL.g_FastFaultOutput1,
                    i_xReset := GVL.AttemptReset);

// Keep an eye on the photon energy
fbPhotonEnergyWatcher(i_stCurrentBeamParams	:= PMPS_GVL.stCurrentBeamParameters,
                    i_stRequestedBeamParams := PMPS_GVL.stRequestedBeamParameters,
                    io_fbFFHWO:= GVL.g_FastFaultOutput1,
                    i_xReset := GVL.AttemptReset);






]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>